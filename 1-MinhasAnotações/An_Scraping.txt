
# ====================== Principais caracteres especiais ==============================
.search => # Retorna a primeira ocorrência encontrada em qual quer posição do texto
.match  =>  # Retorna somente a ocorrencia da primeira posição do texto
.findall => # Retorna toda ocorrencias
.group() =>  # Retorna o conteudo e não só um "match obect"
    .   =>  # Corresponde a qualquer caracteres, menos o de nova linha o "\n",
            ## Para reconhecer o caracteres de nova linha chamamos o metodo ==" re.DOTALL "==
    ^   =>  # Inicio da string encontra a palavra no inicio do texto
    $   =>  # Final da string encontra a palavra no final do texto
    \   =>  # Contra barra  caracteres de escape, para os caracteres serem o que são!
    []  =>  # Uma lista
    *  =>  # Retorna  a expreção e os campos não encontrado as espreção
    +  =>  # Retorna uma ou mais ocorrência da expreção
    ?  =>  # Utilizado quando o caracteres não é obrigatôrio
    \d  => # Digito.Equivale [0-9] Retorna números
    \D  =>  # Retorna caracteres que não são números
    \s  =>  # Retorna qual quer caracteres de espaçamentos "[\t\n\r\f\v]"
    \S  =>  # Qual quer caracteres que não seja de espaçamentos "[^\t\n\r\f\v]"
    \w  =>  # Caracteres alfanumérico ou sublinhado "[a-zA-Z0-9_ ]"
    \W  =>  # Caracteres que não seja alfanumérico ou sublinhado "[^a-zA-Z0-9_ ]"
   "{}" =>  # Quantidades de ocorência ou o tamto de numeros que deseja pegar
     |  => # "ou" logico.  "Barra vertical ou pipe"
   "()" =>  # Define grupos de expreções

# seção 3 - aula 12 ======================== builtwith ========================
builtwith => #serve para obter a tecnôlogia usada nos sites

EX.: import builtwith
    builtwith.parse('https://www.facebok.com'


# seção 4 aula 15 =================== re === Espreção Regulares ==================
re => # para obter um testo ou uma palavra de um texto

EX.: import re

    texto = ('Um testo para teste aqui')

    resultado = re.search('aqui', texto)  # Encontre a palavra "aqui" Na variavel texto que é um texto]

    print(resultado)  # Aqui retorna só um objeto match

    print(resultado.group())  # Aqui imprime o conteudo retornado

# Seção 4 aula 4 =================== compile =========================================
compile
IGNORECASE => Com Ingnora se é maiuscula ou minuscula
match    =>  Procura a ocorrência do padrão no sómenter no inicio da string
EX.:
    padrão = re.compile("e", IGNORECASE)


# Seção 6 aula 25 ================== Tratamentos de Error =============================

HTTPError => # Quando a pagina não existe
URLError =>  # Quando não existe o servidor

# importando o modulo de erros
from urllib.error import HTTPError , URLError

EX.: # Se estiver o site #
    try:
        source_html = urlopen('http://localhost:8000/teste2.html')
        obj = BeautifulSoup(source_html.read(),"html.parser")

        for linha in obj.find_all('a'):
            print(linha.get('href'))

    # Se o site não existir  #
    except HTTPError as erro:
        print('Os erros '+ str(erro))

# Aula 26  =================== BeautifulSoup  "Get_text" ==============================
.get_text  => # Pega todo testos do site
.tag       => # Retorna a primeira ocorrência da tag informada
.tag.name  => # Retorna o nome da primeira ocorrência informada
.tag.string => # Retorna texto da primeria ocorrência da tag informada
.tag.parent => # Retorna a tag externa a tag atual (tag pai/mãe) # ex: <head> "<title> titulo </title>" </head>
.tag.parent.name => # Retorna o nome da tag externa atual (tag pai/mãe)
.tag.['atributo'] => # Retorna todos os valores do atributo informado
    EX.: print(obj.body['class'])
         print(obj.button['aria-controls'])
.find(id="descrição") => # Retorna a tag que possui o id informado
.prettify => # Pára imbelezar o conteudo
.get('href')  =># Retorna sómente os valores do link

EX.:
    obj = BeautifulSoup(html.read(), "html.parser")
    print(obj.get_text())  # pega todo o texto do site
    print(obj.prettify())  # para imbelezar o conteudo retornado
    print(obj.a)          # retorna o primeiro link da pagina
    print(obj.p['class']  # retorna uma classe